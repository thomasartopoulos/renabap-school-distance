library(shiny); runApp('Diplomatura/viz.R')
runApp('Diplomatura/viz.R')
runApp('Diplomatura/viz.R')
runApp('Diplomatura/viz.R')
shiny::runApp('renabap_barrios')
runApp('renabap_barrios')
runApp('renabap_barrios')
runApp('renabap_barrios')
runApp('renabap_barrios')
library(shiny)
library(leaflet)
library(sf)
library(data.table)
library(dplyr)
library(osrm)
# Load the data
barrios <- st_read('output/barrios_inside_amba.geojson')
library(shiny)
library(leaflet)
library(sf)
library(data.table)
library(dplyr)
library(osrm)
# Load the data
barrios <- st_read('output/barrios_inside_amba.geojson')
# Load the data
barrios <- st_read('output/barrios_inside_amba.geojson')
# Load the data
barrios <- st_read('output/barrios_inside_amba.geojson')
runApp('renabap_barrios')
library(shiny)
library(leaflet)
library(sf)
library(data.table)
library(dplyr)
library(osrm)
setwd('~/renabap_barrios')
# Load the data
barrios <- st_read('output/barrios_inside_amba.geojson')
escuelas <- st_read('output/escuelas_inside_amba.geojson')
distances <- fread('output/distances_to_schools.csv')
View(barrios)
runApp()
View(barrios)
View(barrios)
View(barrios)
library(shiny)
library(leaflet)
library(sf)
library(data.table)
library(dplyr)
library(osrm)
setwd('~/renabap_barrios')
# Load the data
barrios <- st_read('output/barrios_inside_amba.geojson')
escuelas <- st_read('output/escuelas_inside_amba.geojson')
distances <- fread('output/distances_to_schools.csv')
View(barrios)
colnames(barrios)
# Calculate centroids and ensure CRS is WGS84 (EPSG:4326)
barrios_centroids <- st_centroid(barrios) %>% st_transform(4326)
# Extract coordinates and create a data frame with all necessary columns
barrios_centroids_coords <- st_coordinates(barrios_centroids)
barrios_centroids_df <- data.frame(
id_renabap = barrios_centroids$id_renabap,
nombre_barrio = barrios_centroids$nombre_barrio,
lng = barrios_centroids_coords[,1],
lat = barrios_centroids_coords[,2]
)
View(barrios_centroids_df)
runApp()
runApp()
View(barrios_centroids_df)
runApp('app_2.R')
library(shiny)
library(leaflet)
library(sf)
library(data.table)
library(dplyr)
library(osrm)
setwd('~/renabap_barrios')
# Load the data
barrios <- st_read('output/barrios_inside_amba.geojson')
escuelas <- st_read('output/escuelas_inside_amba.geojson')
distances <- fread('output/distances_to_schools.csv')
# Calculate centroids and ensure CRS is WGS84 (EPSG:4326)
barrios_centroids <- st_centroid(barrios) %>% st_transform(4326)
# Extract coordinates and create a data frame with all necessary columns
barrios_centroids_coords <- st_coordinates(barrios_centroids)
barrios_centroids_df <- data.frame(
id_renabap = barrios_centroids$id_renabap,
nombre_barrio = barrios_centroids$nombre_barrio,
lng = barrios_centroids_coords[,1],
lat = barrios_centroids_coords[,2]
)
# UI
ui <- fluidPage(
titlePanel("Distance to Nearest Schools"),
sidebarLayout(
sidebarPanel(
selectInput("school_type", "School Type",
choices = unique(distances$school_type)),
actionButton("clear_routes", "Clear Routes")
),
mainPanel(
leafletOutput("map", height = "600px")
)
)
)
server <- function(input, output, session) {
# Reactive expression for filtered data
filtered_data <- reactive({
distances[school_type == input$school_type]
})
# Create the map
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = barrios_centroids_df,
lng = ~lng,
lat = ~lat,
radius = 5,
color = "red",
fillOpacity = 0.7,
popup = ~paste("Barrio:", nombre_barrio))
})
# Update map when school type changes
observe({
req(input$school_type)
data <- filtered_data()
# Merge the filtered data with barrios_centroids_df
merged_data <- left_join(barrios_centroids_df, data, by = "id_renabap")
leafletProxy("map") %>%
clearMarkers() %>%
addCircleMarkers(data = merged_data,
lng = ~lng,
lat = ~lat,
radius = 5,
color = "red",
fillOpacity = 0.7,
popup = ~paste("Barrio:", nombre_barrio,
"<br>Distance:",
ifelse(is.na(distance), "N/A", round(distance, 2)),
"meters"))
})
# Show route when a centroid is clicked
observeEvent(input$map_marker_click, {
click <- input$map_marker_click
if (!is.null(click)) {
tryCatch({
centroid <- st_point(c(click$lng, click$lat)) %>% st_sfc(crs = 4326)
nearest_school <- escuelas[escuelas$nivel == strsplit(input$school_type, "_")[[1]][1] &
escuelas$tipo_organ == strsplit(input$school_type, "_")[[1]][2], ] %>%
st_transform(4326) %>%
st_nearest_feature(centroid)
route <- osrmRoute(src = c(click$lng, click$lat),
dst = st_coordinates(escuelas[nearest_school, ] %>% st_transform(4326))[1,],
overview = "full")
leafletProxy("map") %>%
addPolylines(data = route, color = "blue", weight = 3)
}, error = function(e) {
showNotification("Error calculating route. Please try again.", type = "error")
})
}
})
# Clear routes when button is clicked
observeEvent(input$clear_routes, {
leafletProxy("map") %>% clearShapes()
})
}
runApp('app_2.R')
View(barrios_centroids_df)
View(barrios_centroids_coords)
View(barrios_centroids)
View(barrios)
runApp('app_2.R')
runApp('app_2.R')
library(shiny); runApp('app_2.R')
runApp('app_2.R')
runApp()
runApp()
View(distances)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
